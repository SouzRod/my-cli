'use strict';

const { expect }      = require('chai');
const cloneDeep       = require('clone-deep');

const adapters        = require('../../../../v1/adapters');
const sampleWrapper   = require('../../../../v1/adapters/sample');
const config          = require('../../../../config');

let mockDependencies;

describe('Unit tests for <%= name %> adapter', () => {
  beforeEach('send message', () => {
    mockDependencies = {
      config,
      headers: {
        host: 'http://localhost:8080',
      },
      payload: {},<% if (resource.includes('mongo')){ %> /* repositoryMongoDb: {
        testCollection: {
          findOne: () => Promise.resolve({}),
        },
      }, */<% } %>
      onSuccess: params => params,
      onError: params => params,
    };
  });

  context('smoke tests', () => {
    it('should have a handler adapter created', () => {
      const { sample } = adapters(mockDependencies);
      expect(sample).to.be.a('function');
    });

    it('should have a handler sampleWrapper created', async () => {
      const { handler } = sampleWrapper(mockDependencies);
      expect(handler).to.be.a('function');
    });
  });

  context('Handler ok', () => {
    it('should return object success when handler method', async () => {
      const result = await sampleWrapper(mockDependencies).handler(mockDependencies);<% if (type == 'docker'){ %>
      expect(result).to.be.contain('Running application on port 3001...');<% } %><% if (type == 'serverless'){ %>
      expect(result).to.be.contain('Event lambda...');<% } %>
    });
  });

  context('Handler error', () => {
    it('should return error 500 in handler method', async () => {
      const dependencies = cloneDeep(mockDependencies);
      dependencies.config = null;

      const result = await sampleWrapper(dependencies).handler(dependencies);
      expect(result).to.have.property('stack');
      expect(result).to.have.property('message');
    });
  });
});
